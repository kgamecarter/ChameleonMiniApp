plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keyExists = keystorePropertiesFile.exists()
def keystoreProperties = new Properties()
if (keyExists) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "tw.kgame.chameleonminiapp"
    compileSdkVersion 34

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "tw.kgame.chameleonminiapp"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (keyExists) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
        }
    }
    
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    task dotnetPublish(type: Exec) {
        workingDir '../../Crapto1Native/'
        commandLine 'dotnet', 'publish'
        doLast {
            delete '../../Crapto1Native/obj'
        }
    }

    task buildBflat(type: Exec) {
        doFirst {
            file('src/main/jniLibs/arm64-v8a/').mkdirs()
        }
        workingDir '../../Crapto1Native/'
        commandLine 'bflat', 'build', '--no-reflection', '--no-stacktrace-data', '--no-globalization', '--no-exception-messages', '-Os', '--no-pie', '--separate-symbols', '--os:linux', '--arch:arm64', '--libc:bionic', '-r:bin/Release/net8.0/publish/Crapto1Sharp.dll', '-o:../android/app/src/main/jniLibs/arm64-v8a/libCrapto1Native.so'
        doLast {
            delete 'src/main/jniLibs/arm64-v8a/libCrapto1Native.so.dwo'
        }
    }

    preBuild.dependsOn(dotnetPublish, buildBflat)
}

flutter {
    source '../..'
}

dependencies {}
